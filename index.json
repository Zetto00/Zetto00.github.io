[{"categories":["博客搭建笔记"],"content":"Hello, blog!","date":"2021-10-18","objectID":"/2021/10/blog-build-initiate/","tags":["技术"],"title":"博客搭建笔记","uri":"/2021/10/blog-build-initiate/"},{"categories":["博客搭建笔记"],"content":"本博客使用 GitHub Pages、Hugo 和 LoveIt，可以麻烦地定制化博客。 GitHub Pages Hugo LoveIt 优点 无须自己购买云服务进行搭建，支持的功能多，玩法丰富 Hugo 基于 go 开发，更快及不必安装一堆依赖 简洁美观 缺点 项目和网站的大小不超过 1GB，每小时不超过 10 个版本，每个月带宽使用上限为 100GB Hugo 更年轻，功能性和稳定性欠缺，支持主题少 作者上次更新在2020年 ","date":"2021-10-18","objectID":"/2021/10/blog-build-initiate/:0:0","tags":["技术"],"title":"博客搭建笔记","uri":"/2021/10/blog-build-initiate/"},{"categories":["博客搭建笔记"],"content":"1 准备 ","date":"2021-10-18","objectID":"/2021/10/blog-build-initiate/:1:0","tags":["技术"],"title":"博客搭建笔记","uri":"/2021/10/blog-build-initiate/"},{"categories":["博客搭建笔记"],"content":"1.1 安装 Hugo 详细的安装说明请参考 官方文档。注意安装 extended 版本。 macOS 下可使用包管理工具 Homebrew1 快速安装： brew install hugo win10 下可使用包管理工具 chocolatey 快速安装。以管理员权限打开 cmd.exe，没运行过，不保证这段代码的可行性 # 安装 chocolatey @\"%SystemRoot%\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\" -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command \"iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))\" \u0026\u0026 SET \"PATH=%PATH%;%ALLUSERSPROFILE%\\chocolatey\\bin\" # 安装 Hugo choco install hugo-extended -y 验证 Hugo 是否安装成功： hugo version ","date":"2021-10-18","objectID":"/2021/10/blog-build-initiate/:1:1","tags":["技术"],"title":"博客搭建笔记","uri":"/2021/10/blog-build-initiate/"},{"categories":["博客搭建笔记"],"content":"1.2 安装 Git 从 官方网站 下载，或使用命令行： brew install git choco install git -y 配置 git 的基本信息： git config --global user.name \"xx\" git config --global user.email xx@example.com ","date":"2021-10-18","objectID":"/2021/10/blog-build-initiate/:1:2","tags":["技术"],"title":"博客搭建笔记","uri":"/2021/10/blog-build-initiate/"},{"categories":["博客搭建笔记"],"content":"1.3 创建 GitHub 仓库 注册一个 GitHub2 账号。注意：用户名与随后创建的博客网址强相关。在个人主界面里选择 Create a repository。在 Repository name 的位置填写域名，格式是 username.GitHub.io，记作 repo_name。 技巧 仓库名为 username.GitHub.io，则 GitHub Pages 网址为 username.GitHub.io。 仓库名为 repo_name，则 GitHub Pages 网址为 username.GitHub.io/repo_name。 ","date":"2021-10-18","objectID":"/2021/10/blog-build-initiate/:1:3","tags":["技术"],"title":"博客搭建笔记","uri":"/2021/10/blog-build-initiate/"},{"categories":["博客搭建笔记"],"content":"2 创建你的第一篇博客！ ","date":"2021-10-18","objectID":"/2021/10/blog-build-initiate/:2:0","tags":["技术"],"title":"博客搭建笔记","uri":"/2021/10/blog-build-initiate/"},{"categories":["博客搭建笔记"],"content":"2.1 托管到 GitHub 执行下述命令在本地生成博客网站项目文件夹，该文件夹是这一系列文章之后所有操作执行的根目录（简称为项目根目录）： hugo new site username.github.io # 和仓库名相同 cd username.github.io 将本地的项目文件夹初始化为 Github 仓库： git init # 生成 .git 文件夹 巧用 .gitignore 输入 git status，macOS 用户可能会看到 .DS_Store 文件。这是存储文件夹显示属性的文件，但我们并不想将其纳入 git 的管理范围。在项目里创建 .gitignore 文件并按 glob 模式 匹配不想要的文件即可处理这种情况。可以用 git rm -r --cached .撤销文件缓存。 考虑到每个项目都不需要 .DS_Store，采用全局配置的方法。在用户文件夹（即 Macintosh HD/Users/username）下创建.gitglobalignore 文件，输入 **/.DS_Store；在命令行中输入： git config --global core.excludesfile ~/.gitglobalignore 与远程仓库建立连接需要 token。登陆 GitHub - 点击头像 - Settings - Developer settings - Personal access tokens - Generate new token 得到 token。 将项目文件推送到远程仓库： git add . # 添加文件到暂存区 git commit -m \"Initial commit\" # 提交暂存区到仓库区 git remote add origin https://\u003ctoken\u003e@github.com/\u003cuser_name\u003e/\u003crepo_name\u003e.git git push -u origin master # -u 将本地 master 分支与远程 master 分支关联 ","date":"2021-10-18","objectID":"/2021/10/blog-build-initiate/:2:1","tags":["技术"],"title":"博客搭建笔记","uri":"/2021/10/blog-build-initiate/"},{"categories":["博客搭建笔记"],"content":"2.2 安装主题 主题通常是单独的 Github 仓库，将其作为项目的子模块进行管理： git clone https://github.com/dillonzq/LoveIt.git themes/LoveIt 以下是 LoveIt 主题的基础配置，使其全部代替根目录中 config.toml中的代码： baseURL = \"http://example.org/\" # [en, zh-cn, fr, ...] 设置默认的语言 defaultContentLanguage = \"zh-cn\" # 网站语言, 仅在这里 CN 大写 languageCode = \"zh-CN\" # 是否包括中日韩文字 hasCJKLanguage = true # 网站标题 title = \"我的全新 Hugo 网站\" # 更改使用 Hugo 构建网站时使用的默认主题 theme = \"LoveIt\" [params] # LoveIt 主题版本 version = \"0.2.X\" [menu] [[menu.main]] identifier = \"posts\" # 你可以在名称 (允许 HTML 格式) 之前添加其他信息, 例如图标 pre = \"\" # 你可以在名称 (允许 HTML 格式) 之后添加其他信息, 例如图标 post = \"\" name = \"文章\" url = \"/posts/\" # 当你将鼠标悬停在此菜单链接上时, 将显示的标题 title = \"\" weight = 1 [[menu.main]] identifier = \"tags\" pre = \"\" post = \"\" name = \"标签\" url = \"/tags/\" title = \"\" weight = 2 [[menu.main]] identifier = \"categories\" pre = \"\" post = \"\" name = \"分类\" url = \"/categories/\" title = \"\" weight = 3 # Hugo 解析文档的配置 [markup] # 语法高亮设置 (https://gohugo.io/content-management/syntax-highlighting) [markup.highlight] # false 是必要的设置 (https://github.com/dillonzq/LoveIt/issues/158) noClasses = false 创建第一篇文章： hugo new posts/first_post.md 生成文件在 contene/posts 下。参考 Markdown 基本语法，随意编辑文章。 在本地渲染网站： hugo serve -D 注意 默认情况下, 所有文章和页面均作为草稿创建. 如果想要渲染这些页面, 请从元数据中删除属性 draft: true, 设置属性 draft: false 或者为 hugo 命令添加 -D/–buildDrafts 参数. 到 http://localhost:1313 查看你的博客！ ","date":"2021-10-18","objectID":"/2021/10/blog-build-initiate/:2:2","tags":["技术"],"title":"博客搭建笔记","uri":"/2021/10/blog-build-initiate/"},{"categories":["博客搭建笔记"],"content":"2.3 部署网站 2.3.1 配置 GitHub Actions 利用 Github Actions 可以帮助我们一键部署博客到网站上。 新建、切换、跟踪到 blog 分支： git checkout -b blog # 将本地 blog 分支关联到远程 git push --set-upstream origin blog 检查分支跟踪关系： git branch -vv 可以看到类似于 * blog c63526c [origin/blog] Update posts 的字样。此时可能进入了 vim 编辑器模式，输入 :wq 退出编辑器。 在网页端进入仓库 - Settings - Branches，将默认分支设置为 blog 分支。 生成公私钥供 Github Action 使用： ssh-keygen -t rsa -b 4096 -C \"$(git config user.email)\" -f blog -N \"\" # You will get 2 files in current file: # blog.pub (public key) # blog (private key) 进入仓库 - Settings，在 Deploy Keys 中添加公钥，勾选 Allow write access；在 Secrets 中添加私钥，私钥名设置为 ACTIONS_DEPLOY_KEY。 新建若干文件夹与文件使得目录成为：.github/workflows/main.yml。写入 main.yml内容： name:hugo push to github pageson:push:branches:- blogjobs:build-deploy:runs-on:ubuntu-18.04steps:- uses:actions/checkout@v1with:submodules:true- name:Setup Hugouses:peaceiris/actions-hugo@v2with:hugo-version:'0.88.1'# 更改为当前所用版本extended:true- name:Buildrun:hugo --minify- name:Deployuses:peaceiris/actions-gh-pages@v2env:ACTIONS_DEPLOY_KEY:${{ secrets.ACTIONS_DEPLOY_KEY }}PUBLISH_BRANCH:masterPUBLISH_DIR:./public 在命令行中输入 git add . git commit -m \"\" # 对本次提交的描述 git push 就可以在 https://username.github.io 中看到你的博客网站了！ 2.3.2 思路 按照 Hugo 的生成规则，执行 hugo 命令后，网站静态文件将会生成在 public 文件夹。但由于我们使用 Github Pages 托管博客网站，该功能启用后 Github 仓库只会从 master branch 或 master branch /docs folder 读取网站源码。 我们解决这一问题的方法是新建 blog 分支将博客源码放在该分支下，利用 Github Actions 将 public 目录下的网站文件推送到 master 分支。 Github Actions 使用一种模块化的思路，即将很多持续集成的操作写成独立的脚本文件，放到代码仓库，让其它开发者使用。因此进行持续集成时，可以直接引用别人写好的 actions，整个持续集成的过程，就是一个 actions 组合的过程。GitHub 做了一个官方市场，可以搜索到他人提交的 actions。另外，还有一个 awesome actions 的仓库，也可以找到不少 actions。 我们的基本思路如下： 整个流程在 blog 分支 push 时触发。 只有一个 job，运行在 ubuntu-18.04 环境下。 使用 official action: checkout 获取仓库源码，注意添加参数 clone 主题子模块。 使用 peaceiris/actions-hugo: GitHub Actions for Hugo 部署 hugo 环境，注意使用 extentded 版本（主题要求）。 直接执行 hugo 命令。 使用 peaceiris/actions-gh-pages 将当前分支public目录下的内容部署到master分支。 可以到仓库 - Actions 中查看 workflows 是否运行成功或排查错误。 ","date":"2021-10-18","objectID":"/2021/10/blog-build-initiate/:2:3","tags":["技术"],"title":"博客搭建笔记","uri":"/2021/10/blog-build-initiate/"},{"categories":["博客搭建笔记"],"content":"3 配置 对网站进行更加个性化的定制。 ","date":"2021-10-18","objectID":"/2021/10/blog-build-initiate/:3:0","tags":["技术"],"title":"博客搭建笔记","uri":"/2021/10/blog-build-initiate/"},{"categories":["博客搭建笔记"],"content":"3.1 网页配置 使下列代码全部代替 config.toml中的代码： baseURL = \"http://username.github.io\" # [en, zh-cn, fr, ...] 设置默认的语言 defaultContentLanguage = \"zh-cn\" # 网站语言, 仅在这里 CN 大写 languageCode = \"zh-CN\" # 是否包括中日韩文字 hasCJKLanguage = true # 网站标题 title = \"My Blog\" # 更改使用 Hugo 构建网站时使用的默认主题 theme = \"LoveIt\" # whether to use emoji code enableEmoji = true # whether to use git commit log to generate lastmod record #enableGitInfo = false # whether to use robots.txt #enableRobotsTXT = false # copyright description used only for seo schema #copyright = \"This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.\" # 作者配置 [author] name = \"x\" link = \"https://username.github.io/about/\" # Permalinks Info (https://gohugo.io/content-management/urls/#permalinks) [Permalinks] posts = \":year/:month/:slug\" # 网站地图配置 [sitemap] changefreq = \"weekly\" filename = \"sitemap.xml\" priority = 0.5 [menu] [[menu.main]] identifier = \"posts\" # 你可以在名称 (允许 HTML 格式) 之前添加其他信息, 例如图标 pre = \"\" # 你可以在名称 (允许 HTML 格式) 之后添加其他信息, 例如图标 post = \"\" name = \"文章\" url = \"/posts/\" # 当你将鼠标悬停在此菜单链接上时, 将显示的标题 title = \"\" weight = 1 [[menu.main]] identifier = \"tags\" pre = \"\" post = \"\" name = \"标签\" url = \"/tags/\" title = \"\" weight = 2 [[menu.main]] identifier = \"categories\" pre = \"\" post = \"\" name = \"专栏\" url = \"/categories/\" title = \"\" weight = 3 [[menu.main]] identifier = \"about\" name = \"关于\" url = \"about\" weight = 4 # Hugo 解析文档的配置 [markup] # 语法高亮设置 [markup.highlight] codeFences = true guessSyntax = true # 代码行数设置 lineNos = true lineNoStart = 1 lineNumbersInTable = true tabWidth = 4 #style = \"monokai\" # (https://github.com/dillonzq/LoveIt/issues/158) noClasses = false # Goldmark 是 Hugo 0.60 以来的默认 Markdown 解析库 [markup.goldmark] [markup.goldmark.extensions] definitionList = true footnote = true linkify = true strikethrough = true table = true taskList = true typographer = true [markup.goldmark.renderer] # 是否在文档中直接使用 HTML 标签 unsafe = true # 目录设置 [markup.tableOfContents] startLevel = 2 endLevel = 6 [params] # LoveIt 主题版本 version = \"0.2.X\" # 网站描述 description = \"Null\" # 网站关键词 keywords = [\"Blog\"] # 网站默认主题样式 (\"light\", \"dark\", \"auto\") defaultTheme = \"auto\" # 公共 git 仓库路径，仅在 enableGitInfo 设为 true 时有效 gitRepo = \"\" # 哪种哈希函数用来 SRI, 为空时表示不使用 SRI # (\"sha256\", \"sha384\", \"sha512\", \"md5\") fingerprint = \"\" # 日期格式 dateFormat = \"2006-01-02\" # 网站图片, 用于 Open Graph 和 Twitter Cards images = [\"/logo.png\"] # 主页配置 [params.home] # RSS 文章数目 rss = 10 # 主页个人信息 [params.home.profile] enable = true # Gravatar 邮箱，用于优先在主页显示的头像 #gravatarEmail = \"\" # 主页显示头像的 URL avatarURL = \"/images/avatar.png\" # 主页显示的网站标题 (支持 HTML 格式) title = \"title\" # 主页显示的网站副标题 subtitle = \"subtitle\" # 是否为副标题显示打字机动画 typeit = true # 是否显示社交账号 social = true # 免责声明 (支持 HTML 格式) disclaimer = \"\" # 主页文章列表 [params.home.posts] enable = true # 主页每页显示文章数量 paginate = 6 # 被 params.page 中的 hiddenFromHomePage 替代 # 当你没有在文章前置参数中设置 \"hiddenFromHomePage\" 时的默认行为 defaultHiddenFromHomePage = false # 作者的社交信息设置 [params.social] [params.social.GitHub] # 排列图标时的权重 weight = 1 # 你的社交 ID id = \"\" # 你的社交链接的前缀 prefix = \"https://github.com/\" # 当鼠标停留在图标上时的提示内容 title = \"GitHub\" [params.social.Douban] weight = 0 id = \"\" prefix = \"https://www.douban.com/people/\" title = \"豆瓣\" #Email = \"xxxx@xxxx.com\" #RSS = true #Googlescholar = \"\" #Zhihu = \"\" #Bilibili = \"\" #Mastodon = \"\" #Steam = \"\" #Paypal = \"\" #Spotify = \"\" #Linkedin = \"\" #Twitter = \"xxxx\" #Instagram = \"xxxx\" #Facebook = \"xxxx\" #Telegram = \"xxxx\" #Medium = \"\" #Gitlab = \"\" #Youtubelegacy = \"\" #Youtubecustom = \"\" #Youtubechannel = \"\" #Tumblr = \"\" #Quora = \"\" #Keybase = \"\" #Pinterest = \"\" #Reddit = \"\" #Codepen = \"\" #FreeCodeCamp = \"\" #Bitbucket = \"\" #Stackoverflow = \"\" #Weibo = \"\" #Odnoklassniki = \"\" #VK = \"\" #Flickr = \"\" #Xing = \"\" #Snapchat = \"\" #Soundcloud = \"\" #Bandcamp = \"\" #Fivehundredpx = \"\" #Mix = \"\" #Goodreads = \"\" #Lastfm = \"\" #Foursquare = \"\" #Hackernews = \"\" #Kickstarter = \"\" #Patreon = \"\" #Twitch = \"\" #Strava = \"\" #Skype = \"\" #Whatsapp = \"\" #Angellist = \"\" #Slidershare = \"\" #Jsfiddle = \"\" #Deviantart = \"\" #Behance = \"\" #D","date":"2021-10-18","objectID":"/2021/10/blog-build-initiate/:3:1","tags":["技术"],"title":"博客搭建笔记","uri":"/2021/10/blog-build-initiate/"},{"categories":["博客搭建笔记"],"content":"3.2 网站图标，浏览器配置，网站清单 为了使各种设备都能显示 网页图标，需要生成不同类型的 favicon。 访问 https://www.favicon-generator.org 或其他各类 favicon 生成网站，将得到的图片和 browserconfig.xml 及 site.webmanifest 放置于 /static 目录。 ","date":"2021-10-18","objectID":"/2021/10/blog-build-initiate/:3:2","tags":["技术"],"title":"博客搭建笔记","uri":"/2021/10/blog-build-initiate/"},{"categories":["博客搭建笔记"],"content":"4 文章发布 使用 Hugo 创建文件： hugo new posts/filename.md 利用 LoveIt 提供的各种样式攒写文章。 前置参数 slug 文章分享和访问时，中文 url 较为麻烦。在文章头部的前置参数中添加英文的 slug 字段，此时文章网址为 https://username.github.io/year/month/slug。 在本地渲染网站无误后： hugo serve # 在 http://localhost:1313 查看 部署到 GitHub： # 注意当前要处于 blog 分支 git add . git commit -m \"\" # 对本次提交的描述 git push 等待数分钟，GitHub Actions 的 workflows 完成后，到 https://username/github.io 查看博客。 ","date":"2021-10-18","objectID":"/2021/10/blog-build-initiate/:4:0","tags":["技术"],"title":"博客搭建笔记","uri":"/2021/10/blog-build-initiate/"},{"categories":["博客搭建笔记"],"content":"附录 I Homebrew 安装与加速 注意 使用 echo $0 查看所使用的 shell。若为 bash 则将下文对应 zsh 改为 bash，.zshrc 改为 .bash_profile。 安装 Homebrew： /bin/zsh -c \"$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)\" 使 Homebrew 从更快的源下载： cd \"$(brew --repo)\" git remote set-url origin https://mirrors.ustc.edu.cn/brew.git cd \"$(brew --repo)/Library/Taps/homebrew/homebrew-core\" git remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git cd brew update Homebrew 默认从 Homebrew Bottles 源中下载二进制代码包安装。使 Homebrew Bottles 从更快的源下载： # 使用 echo $0 查看所使用的 shell。若为 bash 则将 .zshrc 改为 .bash_profile echo 'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles' \u003e\u003e ~/.zshrc source ~/.zshrc Homebrew Cask 可以下载常见的带界面的应用软件。 brew install cask cd \"$(brew --repo)/Library/Taps/homebrew/homebrew-cask\" git remote set-url origin https://mirrors.ustc.edu.cn/homebrew-cask.git git -C \"$(brew --repo homebrew/cask)\" remote set-url origin https://mirrors.ustc.edu.cn/homebrew-cask.git cd homebrew update 验证 Homebrew 是否配置成功： brew config ","date":"2021-10-18","objectID":"/2021/10/blog-build-initiate/:5:0","tags":["技术"],"title":"博客搭建笔记","uri":"/2021/10/blog-build-initiate/"},{"categories":["博客搭建笔记"],"content":"附录 II 科学访问 GitHub 由于 DNS 污染3和 SNI 封锁4 ，GitHub 间歇性可连接。 使用项目 dev-sidecar 可以科学访问 GitHub。其 原理 是在本地启动代理服务器帮助访问目标网站；当目标网站需要拦截时（例如 github），就通过中间人攻击修改请求或者请求其他替代网站，从而达到科学的目的。 由于浏览器和命令行访问网站原理不同，要打开 Git.exe代理 选项。 警告 加速服务-基本设置-日志中记录下了浏览器访问的所有网站。在不需要访问 GitHub 时可以把软件关掉。 ","date":"2021-10-18","objectID":"/2021/10/blog-build-initiate/:6:0","tags":["技术"],"title":"博客搭建笔记","uri":"/2021/10/blog-build-initiate/"},{"categories":["博客搭建笔记"],"content":"附录 III 参考链接 [1]：LoveIt 文档 [2]：书葬的博客（特别致谢！） 参见附录 I ↩︎ 参见附录 II ↩︎ Domain Name System；域名解析至缓慢或错误的 IP ↩︎ Server Name Indication；服务器支持多个域名，目标域名明文传递 ↩︎ ","date":"2021-10-18","objectID":"/2021/10/blog-build-initiate/:7:0","tags":["技术"],"title":"博客搭建笔记","uri":"/2021/10/blog-build-initiate/"}]